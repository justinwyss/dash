import React from 'react';

var VERBOSE = true;

var moment = require('moment');

class ConfigureAddWidget extends React.Component {
  constructor(props) {
    super();
    var configs = {
      pie:       {configureDisplay: 'none',
                  size:             'half',
                  name:             'gnu widget',
                  obeyDatePicker:   'none',
                  tabStartDateISO:  moment().toISOString(),
                  tabEndDateISO:    moment().toISOString(),
                  myStartDateISO:   moment().toISOString(),
                  myEndDateISO:     moment().toISOString(),
                  type:             'pie',
                  source:           '(undefined)',
                  aggMethod:        '(undefined)',
                  aggTime:          false,
                  aggNumeric:       false,
                  metrics:          ['(undefined)','(undefined)'],
                  filters:          []},
      line:      {configureDisplay: 'none',
                  size:             'half',
                  name:             'gnu widget',
                  obeyDatePicker:   'none',
                  tabStartDateISO:  moment().toISOString(),
                  tabEndDateISO:    moment().toISOString(),
                  myStartDateISO:   moment().toISOString(),
                  myEndDateISO:     moment().toISOString(),
                  type:             'line',
                  source:           '(undefined)',
                  aggMethod:        '(undefined)',
                  aggTime:          false,
                  aggNumeric:       false,
                  metrics:          ['(undefined)','(undefined)'],
                  filters:          []},
      scatter:   {configureDisplay: 'none',
                  size:             'half',
                  name:             'gnu widget',
                  obeyDatePicker:   'none',
                  tabStartDateISO:  moment().toISOString(),
                  tabEndDateISO:    moment().toISOString(),
                  myStartDateISO:   moment().toISOString(),
                  myEndDateISO:     moment().toISOString(),
                  type:             'scatter',
                  source:           '(undefined)',
                  aggTime:          false,
                  aggNumeric:       false,
                  metrics:          ['(undefined)','(undefined)'],
                  filters:          []},
      bar:       {configureDisplay: 'none',
                  size:             'half',
                  name:             'gnu widget',
                  obeyDatePicker:   'none',
                  tabStartDateISO:  moment().toISOString(),
                  tabEndDateISO:    moment().toISOString(),
                  myStartDateISO:   moment().toISOString(),
                  myEndDateISO:     moment().toISOString(),
                  type:             'bar',
                  source:           '(undefined)',
                  aggMethod:        '(undefined)',
                  aggTime:          false,
                  aggNumeric:       false,
                  metrics:          ['(undefined)','(undefined)'],
                  filters:          []},
      histogram: {configureDisplay: 'none',
                  size:             'half',
                  name:             'gnu widget',
                  obeyDatePicker:   'none',
                  tabStartDateISO:  moment().toISOString(),
                  tabEndDateISO:    moment().toISOString(),
                  myStartDateISO:   moment().toISOString(),
                  myEndDateISO:     moment().toISOString(),
                  type:             'histogram',
                  source:           '(undefined)',
                  bucketCountValue: '(undefined)',
                  metrics:          ['(undefined)'],
                  filters:          []},
      column:    {configureDisplay: 'none',
                  size:             'half',
                  name:             'gnu widget',
                  obeyDatePicker:   'none',
                  tabStartDateISO:  moment().toISOString(),
                  tabEndDateISO:    moment().toISOString(),
                  myStartDateISO:   moment().toISOString(),
                  myEndDateISO:     moment().toISOString(),
                  type:             'column',
                  source:           '(undefined)',
                  aggMethod:        '(undefined)',
                  metrics:          ['(undefined)','(undefined)'],
                  filters:          []},
      stats:     {configureDisplay: 'none',
                  size:             'half',
                  name:             'gnu widget',
                  obeyDatePicker:   'none',
                  tabStartDateISO:  moment().toISOString(),
                  tabEndDateISO:    moment().toISOString(),
                  myStartDateISO:   moment().toISOString(),
                  myEndDateISO:     moment().toISOString(),
                  type:             'stats',
                  source:           '(undefined)',
                  metrics:          ['(undefined)'],
                  filters:          []}
    };
    this.state = {
      configs: configs,
      widgetType: ''
    };
    this.cancelButtonHandler = this.cancelButtonHandler.bind(this);
    this.updateButtonHandler = this.updateButtonHandler.bind(this);
    this.onChange = this.onChange.bind(this);
  }
  cancelButtonHandler() {
    if (VERBOSE) {console.log('ConfigureAddWidget - cancelButtonHandler');}
    this.props.callbackAddWidgetUpdate('');
  }
  updateButtonHandler() {
    if (VERBOSE) {console.log('ConfigureAddWidget - updateButtonHandler');}
    this.props.callbackAddWidgetUpdate(this.state.configs[this.state.widgetType]);
  }
  onChange(type) {
    this.setState({widgetType:type});
  }
  render() {
    return (
        <div>
        <div className="deactivatingOverlay"></div>
        <div className='addwidgetwindow'>
        <div className='bandtitle'>Pick Widget Type</div>
        <div className={this.state.widgetType == 'pie'       ? 'addwidgetdiv-selected' : 'addwidgetdiv-unselected'} onClick={this.onChange.bind(this,'pie')}>Pie</div>
        <div className={this.state.widgetType == 'line'      ? 'addwidgetdiv-selected' : 'addwidgetdiv-unselected'} onClick={this.onChange.bind(this,'line')}>Line</div>
        <div className={this.state.widgetType == 'scatter'   ? 'addwidgetdiv-selected' : 'addwidgetdiv-unselected'} onClick={this.onChange.bind(this,'scatter')}>Scatter</div>
        <div className={this.state.widgetType == 'bar'       ? 'addwidgetdiv-selected' : 'addwidgetdiv-unselected'} onClick={this.onChange.bind(this,'bar')}>Bar</div>
        <div className={this.state.widgetType == 'histogram' ? 'addwidgetdiv-selected' : 'addwidgetdiv-unselected'} onClick={this.onChange.bind(this,'histogram')}>Histogram</div>
        <div className={this.state.widgetType == 'column'    ? 'addwidgetdiv-selected' : 'addwidgetdiv-unselected'} onClick={this.onChange.bind(this,'column')}>Column</div>
        <div className={this.state.widgetType == 'stats'     ? 'addwidgetdiv-selected' : 'addwidgetdiv-unselected'} onClick={this.onChange.bind(this,'stats')}>Stats</div>
        <br/>
        <button onClick={this.updateButtonHandler}>Add Widget</button>
        <button onClick={this.cancelButtonHandler}>Cancel</button>
        </div>
        </div>
    );
  }
}

export default ConfigureAddWidget;
